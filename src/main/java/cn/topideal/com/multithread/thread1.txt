isAlive()
判断当前线程是否处于活动状态，所谓的活动状态就是线程已经启动且尚未终止，线程处于正在运行或准备开始运行的状态。

sleep()
在指定的毫秒数内让当前线程“正在执行的线程”休眠（暂停执行），这个正在执行的线程是指this.currentThread()返回的线程。

getId()
获取线程的唯一标识

interrupted()
静态方法，判断当前线程是否中断，会清除标记状态

isInterrupted()
判断当前线程是否中断，但不清除状态标志。

stop()
暴力停止线程,此方法并不提倡使用，并已经被java废弃。在使用stop方法释放锁将会给数据造成不一致性的结果，因为程序的强制中断，而导致后续的处理逻辑未完成，造成了数据的不一致。

interrupt()
标记中断当前线程

suspend()和resume()
暂停线程和恢复线程运行。在使用这两个方法时，如果使用不当，极易造成公共的同步对象的独占，使得其他线程无法访问公共同步对象。因为调用suspend方法导致线程中断而无法及时释放锁。在使用suspend和resume方法时，也容易出现因为线程的暂停而导致数据不同步的情况。

yield()
让当前线程放弃当前的cpu资源，将它让给其他的任务去占用cpu的执行时间。当放弃的时间不确定，有可能刚刚放弃，又马上获得cpu时间。需要注意的是该方法与sleep一样，只是让出cpu时间，但并不会释放锁资源。
