//CountDownLatch源码分析

public void countDown() {
    sync.releaseShared(1);//计数器减1
}

public final boolean releaseShared(int arg) {
    //判断计数器是否归0 ，如果计数器归0则进行后续的逻辑操作，否则返回false
    if (tryReleaseShared(arg)) {
        //计数器归0后的操作
        doReleaseShared();
        return true;
    }
    return false;
}

protected boolean tryReleaseShared(int releases) {
    // Decrement count; signal when transition to zero
    for (;;) {
        int c = getState();//获取计数器
        if (c == 0) //如果计数器已经归
            return false;//直接返回false
        int nextc = c-1;//计数器减1
        if (compareAndSetState(c, nextc))
            return nextc == 0;//如果计数器归0返回true，否则返回false
    }
}

private void doReleaseShared() {
    for (;;) {
        Node h = head;
        if (h != null && h != tail) {
            int ws = h.waitStatus;
            if (ws == Node.SIGNAL) {
                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
                    continue;            // loop to recheck cases
                unparkSuccessor(h);//所有计数器归0后，唤醒被挂起的线程
            }
            else if (ws == 0 &&
                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))
                continue;                // loop on failed CAS
        }
        if (h == head)                   // loop if head changed
            break;
    }
}



public void await() throws InterruptedException {
    sync.acquireSharedInterruptibly(1);
}

public final void acquireSharedInterruptibly(int arg)
        throws InterruptedException {
    if (Thread.interrupted())//如果收到过线程中断，那么直接抛出异常
        throw new InterruptedException();
    if (tryAcquireShared(arg) < 0)//如果计数器归0 则返回1 否则返回-1
        doAcquireSharedInterruptibly(arg);//意味着计数器还没有归0
}

protected int tryAcquireShared(int acquires) {
    return (getState() == 0) ? 1 : -1;//计数器归0 返回1 否则返回-1
}

private void doAcquireSharedInterruptibly(int arg)
    throws InterruptedException {
    final Node node = addWaiter(Node.SHARED);//构建共享型的同步队列
    boolean failed = true;
    try {
        for (;;) {
            final Node p = node.predecessor();
            if (p == head) {
                int r = tryAcquireShared(arg);//如果此时计数器仍然还没有归0，那么直接挂起当前线程，否则获得锁成功，执行后续的逻辑操作，即不再阻塞
                if (r >= 0) {
                    setHeadAndPropagate(node, r);
                    p.next = null; // help GC
                    failed = false;
                    return;
                }
            }
            if (shouldParkAfterFailedAcquire(p, node) &&
                parkAndCheckInterrupt())
                throw new InterruptedException();
        }
    } finally {
        if (failed)
            cancelAcquire(node);
    }
}



//CyclicBarrier源码分析

public int await() throws InterruptedException, BrokenBarrierException {
    try {
        return dowait(false, 0L);
    } catch (TimeoutException toe) {
        throw new Error(toe); // cannot happen
    }
}

private int dowait(boolean timed, long nanos)
    throws InterruptedException, BrokenBarrierException,
           TimeoutException {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        final Generation g = generation;//栅栏

        if (g.broken)
            throw new BrokenBarrierException();

        if (Thread.interrupted()) {//如果在await方法前调用过线程中断方法，则会打开栅栏，并唤醒其他等待线程
            breakBarrier();
            throw new InterruptedException();
        }

        int index = --count;//计数器减1
        if (index == 0) {  // tripped 如果计数器归0
            boolean ranAction = false;
            try {
                final Runnable command = barrierCommand;
                if (command != null)
                    command.run(); //构造函数有申明栅栏打开后的调用方法时，直接调用构造函数掺入的接口
                ranAction = true;
                nextGeneration();//构建新的栅栏，并唤醒所有等待线程
                return 0;
            } finally {
                if (!ranAction)
                    breakBarrier();
            }
        }

        // loop until tripped, broken, interrupted, or timed out
        for (;;) {
            try {
                if (!timed)//如果没有指定等待时间
                    trip.await();//直接阻塞
                else if (nanos > 0L)
                    nanos = trip.awaitNanos(nanos);//否则指定阻塞时间等待，不过Condition中，如果等待时间超过指定时间才会挂起线程，
                    //否则只是让CPU放弃时间片，以此来优化线程上下文切换
            } catch (InterruptedException ie) {
                if (g == generation && ! g.broken) {
                    breakBarrier();
                    throw ie;
                } else {
                    // We're about to finish waiting even if we had not
                    // been interrupted, so this interrupt is deemed to
                    // "belong" to subsequent execution.
                    Thread.currentThread().interrupt();
                }
            }

            //如果栅栏被打开
            if (g.broken)
                throw new BrokenBarrierException();

            //如果栅栏被打开，或者计数器归0
            if (g != generation)
                return index;

            //超时
            if (timed && nanos <= 0L) {
                breakBarrier();
                throw new TimeoutException();
            }
        }
    } finally {
        lock.unlock();
    }
}



//Semaphore源码分析

public void acquire() throws InterruptedException {
    sync.acquireSharedInterruptibly(1);
}

public final void acquireSharedInterruptibly(int arg)
        throws InterruptedException {
    if (Thread.interrupted())//线程中断，则直接抛异常
        throw new InterruptedException();
    if (tryAcquireShared(arg) < 0)//尝试获取锁
        doAcquireSharedInterruptibly(arg);
}

protected int tryAcquireShared(int acquires) {
    for (;;) {
        if (hasQueuedPredecessors())//如果当前有线程在等待获取锁，且非当前线程，那么直接返回-1
            return -1;
        int available = getState();
        int remaining = available - acquires;
        if (remaining < 0 ||
            compareAndSetState(available, remaining))
            return remaining;//多个线程尝试获取锁，直接减1操作，如果线程数超过计数器则返回负数，意味着获取锁失败
    }
}

private void doAcquireSharedInterruptibly(int arg)
    throws InterruptedException {
    final Node node = addWaiter(Node.SHARED);//构建同步队列
    boolean failed = true;
    try {
        for (;;) {
            final Node p = node.predecessor();
            if (p == head) {
                int r = tryAcquireShared(arg);//如果计数器复位，且当前head节点的下一个节点就是当前线程，那么获取锁成功
                if (r >= 0) {
                    setHeadAndPropagate(node, r);//会替换head节点，并唤醒后续节点
                    p.next = null; // help GC
                    failed = false;
                    return;
                }
            }
            //如果尝试获取锁失败后会挂起线程，再次被唤醒后会执行上述的逻辑
            if (shouldParkAfterFailedAcquire(p, node) &&
                parkAndCheckInterrupt())
                throw new InterruptedException();
        }
    } finally {
        if (failed)
            cancelAcquire(node);
    }
}


public void release() {
    sync.releaseShared(1);
}

public final boolean releaseShared(int arg) {
    if (tryReleaseShared(arg)) {//尝试释放锁
        doReleaseShared();
        return true;
    }
    return false;
}

private void doReleaseShared() {
    for (;;) {
        Node h = head;
        if (h != null && h != tail) {
            int ws = h.waitStatus;
            if (ws == Node.SIGNAL) {
                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
                    continue;            // loop to recheck cases
                unparkSuccessor(h);//唤醒head节点的下一个节点
            }
            else if (ws == 0 &&
                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))
                continue;                // loop on failed CAS
        }
        if (h == head)                   // loop if head changed
            break;
    }
}

//Condition源码分析

public final void await() throws InterruptedException {
    if (Thread.interrupted())//如果线程中断，则直接抛异常
        throw new InterruptedException();
    Node node = addConditionWaiter();
    long savedState = fullyRelease(node);//释放锁
    int interruptMode = 0;
    while (!isOnSyncQueue(node)) {//如果当前节点不再同步队列中
        LockSupport.park(this);//挂起当前线程
        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)//如果期间收到过中断请求，则跳出循环，否则继续循环挂起，直到当前note节点进入同步队列中
            break;
    }
    //尝试获取锁
    if (acquireQueued(node, savedState) && interruptMode != THROW_IE)
        interruptMode = REINTERRUPT;
    if (node.nextWaiter != null) // clean up if cancelled
        unlinkCancelledWaiters();
    if (interruptMode != 0)
        reportInterruptAfterWait(interruptMode);
}

private Node addConditionWaiter() {
    Node t = lastWaiter;
    // If lastWaiter is cancelled, clean out.
    if (t != null && t.waitStatus != Node.CONDITION) {//如果等待队列尾节点不为等待状态，则需要清除该节点
        unlinkCancelledWaiters();
        t = lastWaiter;
    }
    Node node = new Node(Thread.currentThread(), Node.CONDITION);//构建等待状态节点并加入等待队列末尾
    if (t == null)
        firstWaiter = node;
    else
        t.nextWaiter = node;
    lastWaiter = node;
    return node;
}

private void unlinkCancelledWaiters() {
    Node t = firstWaiter;
    Node trail = null;//当前节点的上一个节点
    while (t != null) {
        Node next = t.nextWaiter;//当前节点的下一个节点
        if (t.waitStatus != Node.CONDITION) {//如果当前节点不等于等待状态
            t.nextWaiter = null;//将其下一个节点置空
            if (trail == null)//如果当前节点的上一个节点为空，意味这是第一次进入循环
                firstWaiter = next;//则直接将头节点指向当前节点的下一个节点，也即队列中剔除当前节点
            else
                trail.nextWaiter = next;//如果当前当前节点的前一个节点不为空，那么直接将当前节点的前一个节点指向当前节点的下一个节点，目的也是为了从队列中剔除当前节点
            if (next == null)//如果当前节点的下一个节点为空，则说明当前节点是尾节点
                lastWaiter = trail;//则直接将尾节点指向当前节点的上一个节点，目的也是为了从队列中剔除当前节点
        }
        else
            trail = t;//将当前节点赋值给trail，作为下一次循环中当前节点的前一个节点
        t = next;
    }
}

final boolean isOnSyncQueue(Node node) {
    //如果当前节点是等待状态或者当前节点的前一个节点为空则表示不再同步队列，因为等待队列是单向队列，当前节点的前一个节点当然为空
    if (node.waitStatus == Node.CONDITION || node.prev == null)
        return false;
     //到这里如果当前节点的下一个节点也不为空，且不是等待状态，那么当前节点一定是在同步队列中
    if (node.next != null) // If has successor, it must be on queue
        return true;
     //如果当前note节点的前一个节点不为空，又不是等待状态，那么可能的情况就是在同步队列中挂起线程前加入同步队列进行CAS替换时失败了，所以这个时候让仍然需要去再次尝试遍历判断同步是否存在该节点
    return findNodeFromTail(node);
}

private boolean findNodeFromTail(Node node) {
    Node t = tail;
    for (;;) {
        if (t == node)
            return true;
        if (t == null)
            return false;
        t = t.prev;
    }
}


public final void signal() {
    //唤醒线程不是获取锁的线程抛异常
    if (!isHeldExclusively())
        throw new IllegalMonitorStateException();
    Node first = firstWaiter;//等待队首唤醒
    if (first != null)
        doSignal(first);
}

private void doSignal(Node first) {
    do {
        //获取等待队列的下一个节点，如果等待队列头节点的下一个节点为空
        if ( (firstWaiter = first.nextWaiter) == null)
            lastWaiter = null;//清空尾节点
        first.nextWaiter = null;//清空头节点的下一个节点
    } while (!transferForSignal(first) &&
             (first = firstWaiter) != null);
}

final boolean transferForSignal(Node node) {
    if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))
        return false;

    //将等待队列中的note移动到同步队列，把当前note移动到同步队列的目的是为wait方法在循环判断当前note节点是否在同步队列时，条件为真
    Node p = enq(node);
    int ws = p.waitStatus;
    if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))
        LockSupport.unpark(node.thread);//唤醒该线程即唤醒在wait中阻塞的线程
    return true;
}